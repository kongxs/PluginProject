import com.android.build.gradle.AppExtension
import com.android.build.gradle.internal.dsl.DefaultConfig

apply plugin: 'com.android.application'
//apply plugin: 'groovy'


repositories {
    mavenCentral()
    google()

    maven {// 添加Maven的本地依赖
        url uri('./repository')
    }
}

def mCompileSdkVersion = 28

android {
    compileSdkVersion this.compilesdkV
    defaultConfig {
        applicationId "com.example.pluginproject"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        jd {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}


repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
//    implementation 'com.android.support:appcompat-v7:28.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation project(path: ':skin')
    implementation project(path: ':mvp')
    implementation project(path: ':link')


    implementation 'com.squareup.retrofit2:retrofit:2.0.2'
    implementation 'com.squareup.retrofit2:converter-gson:2.0.2'
//    implementation 'com.google.code.gson:gson:2.8.5'

    implementation 'com.android.support.constraint:constraint-layout:1.1.3'

    implementation rootProject.ext.recyclerview
    implementation rootProject.ext.supportV4
    implementation  rootProject.ext.appcompatV7


    implementation 'com.eclipsesource.j2v8:j2v8:6.1.0'

//    compile localGroovy()
//    implementation 'com.android.tools.build:transform-api:1.5.0'
//    implementation 'commons-io:commons-io:2.5'

}

//工程配置 ，需要

// 1. 创建plugin实现类

//apply plugin: fun.wanke.plugin.MyPlugin
//
////apply plugin: 'fun.wanke.plugin'
//
//address {
//    name = "hjaha"
//}


/**
 * 分别定义Extension1 和 Extension2 类，申明参数传递变量
 */
//class Extension1 {
//    String testVariable1 = null
//}
//
//class Extension2 {
//    String testVariable2 = null
//}
///**
// * 插件入口类
// */
//class TestPlugin implements Plugin<Project> {
//    @Override
//    void apply(Project project) {
//        //利用Extension创建e1 e2 闭包，用于接受外部传递的参数值
//        project.extensions.create('e1', Extension1.class)
//        project.extensions.create('e2', Extension2.class)
//
//        //创建readExtension task 执行该task 进行参数值的读取以及自定义逻辑...
//        project.task('read') {
//
//            println 'e1 = ' + project['e1'].testVariable1
//            println 'e2 = ' + project['e2'].testVariable2
//        }
//    }
//}
///**
// * 依赖我们刚刚自定义的TestPlugin，注意 使用e1 {} || e2{} 一定要放在apply plugin:TestPlugin 后面, 因为 app plugin:TestPlugin
// * 会执行 Plugin的apply 方法，进而利用Extension 将e1 、e2 和 Extension1 Extension2 绑定，编译器才不会报错
// */
//apply plugin: TestPlugin
//
//e1 {
//    testVariable1 = 'testVariable1'
//}
//
//e2 {
//    testVariable2 = 'testVariable2'
//}


//apply plugin: fun.wanke.plugin.MyPlugin


//address {
//    name "zhangsan lisi "
//}

//task helloJd(type : MyTask) {
//    doLast {
//        println "action 2 ......  "
//    }
//}


//apply plugin: 'fun.wanke.plugin'
apply plugin: 'fun.wanke.robust.patch'
//task Hell(type : fun.wanke.plugin.JdJarTask) {
//
//}
//extParams {
//    logEnable true
//}


//配置阶段开始
this.beforeEvaluate{
    print"配置阶段开始"
}

//配置阶段结束
this.afterEvaluate{
    print"配置阶段结束"
}

//gradle执行结束
this.gradle.buildFinished{
    print"gradle 执行结束 "


    /**
     * android {*
     * }
     */
    def android = project.getExtensions().getByType(AppExtension)

    def version = android.buildToolsVersion
    def version1 = android.compileSdkVersion
    def version2 = android.ndkVersion
    println("buildV:$version , compileV: $version1 , ndkV: $version2")

    /**
     * defaultConfig {
     *
     * }
     */
    DefaultConfig config = android.defaultConfig
    def id = config.applicationId
    def version3 = config.minSdkVersion
    def placeholders = config.manifestPlaceholders


    android.signingConfigs.each {
        println("signConfigs: $it.name")
    }

    android.buildTypes.each{  value->
        println("buildType : ${value.name}")
        if (value.name.equals("debug")) {
        }
    }

}

